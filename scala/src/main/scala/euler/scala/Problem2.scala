package euler.scala

/**
 * Problem 2 (Fibonacci Even Summation)
 * <p/>
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * <pre>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</pre>
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 *
 * @author Ryo TANAKA
 * @since 1.0
 */

object Problem2 {
  def fibEvenSum(max: Int) = {
    fibSeq(List(2L, 1L), max).filter(_ % 2 == 0).sum
  }

  private def fibSeq(init: List[Long], max: Int): Seq[Long] = {
    val sum = init.head + init.tail.head
    if (max < sum) {
      return init;
    }
    fibSeq(sum :: init, max)
  }
}
